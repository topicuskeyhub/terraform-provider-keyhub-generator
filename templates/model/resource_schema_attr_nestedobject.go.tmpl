{{- if eq .Type.FlattenMode "AdditionalObjects" -}}
    maps.Copy(schemaAttrs, resourceSchemaAttrs{{ .Type.NestedType.GoTypeName }}({{ RecurseCutOff .Parent }}))
{{- else -}}
{
{{- if eq .Type.FlattenMode "ItemsSet" }}
{{- if (index .Type.NestedType.AllProperties 0).Type.Complex }}
    attr := resetSetNestedAttributeFlags(resourceSchemaAttrs{{ .Type.NestedType.GoTypeName }}({{ RecurseCutOff .Parent }})["items"].(rsschema.SetNestedAttribute))
{{- else }}
    attr := resetSetAttributeFlags(resourceSchemaAttrs{{ .Type.NestedType.GoTypeName }}({{ RecurseCutOff .Parent }})["items"].(rsschema.SetAttribute))
{{- end }}
{{- else }}
    attr := rsschema.SingleNestedAttribute{
        Attributes: resourceSchemaAttrs{{ .Type.NestedType.GoTypeName }}({{ RecurseCutOff .Parent }}),
    }
{{- end }}
{{- if eq .Type.RSSchemaTemplateData.Mode "Computed_UseStateForUnknown" }}
    attr.Computed = true
    attr.PlanModifiers = []planmodifier.Object{ objectplanmodifier.UseStateForUnknown() }
{{- else if eq .Type.RSSchemaTemplateData.Mode "Optional_Computed" }}
    attr.Optional = true
    attr.Computed = true
{{- else }}
    attr.{{ .Type.RSSchemaTemplateData.Mode }} = true
{{- end }}
{{- if .Deprecated }}
    attr.DeprecationMessage = "This property will be removed in a future version."
{{- end }}
    schemaAttrs["{{ .TFName }}"] = attr
}
{{- end }}
