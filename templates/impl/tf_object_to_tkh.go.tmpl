{{- define "tkhpropconvert" }}
{{- if .Type.ToTKHAttrWithDiag }}
    {{ .Type.TFToTKHGuard }}{
        val, d := {{ .TFToTKH }}
        diags.Append(d...)
{{- if .Type.ToTKHCustomCode }}
        {{ .Type.ToTKHCustomCode }}
{{- else }}
        tkh.{{ .TKHSetter }}(val)
{{- end }}
{{- if .IsDTypeRequired }}
        if val != nil {
            val.SetAdditionalData(map[string]any{"$type": "{{ .Type.NestedType.APIDiscriminator }}"})
        }
{{- end }}
    }
{{- else }}
    tkh.{{ .TKHSetter }}({{ .TFToTKH }})
{{- end }}
{{- end }}
func tfObjectToTKH{{ .Suffix }}{{ .GoTypeName }}(ctx context.Context, recurse bool, objVal types.Object) ({{ .SDKTypeName }}, diag.Diagnostics) {
    var diags diag.Diagnostics
    if objVal.IsNull() {
        return nil, diags
    }

{{- if .AllProperties }}
    objAttrs := objVal.Attributes()
{{- end }}
    var tkh {{ .SDKTypeName }}
    tkh = {{ .SDKTypeConstructor }}
{{- if .AllProperties }}
{{- range AllDirectProperties . }}
{{- if ne .TFToTKH "" }}
{{- template "tkhpropconvert" . }}
{{- end }}
{{- end }}
{{- with AdditionalObjectsProperty . }}
    if recurse {
{{- template "tkhpropconvert" . }}
    }
{{- end }}
{{- end }}
    return tkh, diags
}
