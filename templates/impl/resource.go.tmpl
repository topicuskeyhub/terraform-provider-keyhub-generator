// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	keyhub "github.com/topicuskeyhub/sdk-go"
	keyhubmodels "github.com/topicuskeyhub/sdk-go/models"
	keyhubreq "github.com/topicuskeyhub/sdk-go/{{ .ResourceBase }}"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ resource.Resource                = &{{ .Name }}Resource{}
	_ resource.ResourceWithImportState = &{{ .Name }}Resource{}
	_ resource.ResourceWithConfigure   = &{{ .Name }}Resource{}
)

func New{{ .NameUp }}Resource() resource.Resource {
	return &{{ .Name }}Resource{}
}

type {{ .Name }}Resource struct {
	client *keyhub.KeyHubClient
}

func (r *{{ .Name }}Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = ProviderName + "_{{ .NameUnderscore }}"
	tflog.Info(ctx, "Registred resource "+resp.TypeName)
}

func (r *{{ .Name }}Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: resourceSchemaAttrs{{ .FullNameUp }}(true),
	}
}

func (r *{{ .Name }}Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*keyhub.KeyHubClient)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *keyhub.KeyHubClient, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *{{ .Name }}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	obj, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRS{{ .FullNameUp }}(ctx, true, obj)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Info(ctx, "Creating Topicus KeyHub {{ .NameUnderscore }}")
	newWrapper := keyhubmodels.New{{ .BaseNameUp }}LinkableWrapper()
	newWrapper.SetItems([]keyhubmodels.{{ .BaseNameUp }}able{newTkh})
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUID(ctx, data.{{ .ResourceBaseUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	wrapper, err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.Post(
{{- else }}
	wrapper, err := r.client.{{ .ResourceBaseUp }}().Post(
{{- end }}
		ctx, newWrapper, &keyhubreq.{{ .GetPostRequestTypePrefix }}RequestBuilderPostRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .GetPostRequestTypePrefix }}RequestBuilderPostQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})
	tkh, diags := findFirst[keyhubmodels.{{ .BaseNameUp }}able](ctx, wrapper, "{{ .NameUnderscore }}", nil, err)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tf, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	tf = setAttributeValue(ctx, tf, "{{ .ResourceBase }}_uuid", types.StringValue(data.{{ .ResourceBaseUp }}UUID.ValueString()))
{{- end }}
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&data, tf)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)

	tflog.Info(ctx, "Created a new Topicus KeyHub {{ .NameUnderscore }}")
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{ .Name }}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	tflog.Info(ctx, "Reading {{ .NameUnderscore }} from Topicus KeyHub")
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUID(ctx, data.{{ .ResourceBaseUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tkh, err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.By{{ .SubResourceBaseUp }}idInt64(getSelfLink(data.Links).ID.ValueInt64()).Get(
{{- else }}
	tkh, err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(getSelfLink(data.Links).ID.ValueInt64()).Get(
{{- end }}
		ctx, &keyhubreq.{{ .PutRequestTypePrefix }}RequestBuilderGetRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .PutRequestTypePrefix }}RequestBuilderGetQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	tf, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	tf = setAttributeValue(ctx, tf, "{{ .ResourceBase }}_uuid", types.StringValue(data.{{ .ResourceBaseUp }}UUID.ValueString()))
{{- end }}
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&data, tf)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{ .Name }}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
{{- if .UpdateSupported }}
	var data {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	obj, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRS{{ .FullNameUp }}(ctx, true, obj)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Info(ctx, "Updating Topicus KeyHub {{ .NameUnderscore }}")
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUID(ctx, data.{{ .ResourceBaseUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tkh, err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.By{{ .SubResourceBaseUp }}idInt64(getSelfLink(data.Links).ID.ValueInt64()).Put(
{{- else }}
	tkh, err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(getSelfLink(data.Links).ID.ValueInt64()).Put(
{{- end }}
		ctx, newTkh, &keyhubreq.{{ .PutRequestTypePrefix }}RequestBuilderPutRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .PutRequestTypePrefix }}RequestBuilderPutQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	tf, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	tf = setAttributeValue(ctx, tf, "{{ .ResourceBase }}_uuid", types.StringValue(data.{{ .ResourceBaseUp }}UUID.ValueString()))
{{- end }}
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&data, tf)

	tflog.Info(ctx, "Updated a Topicus KeyHub {{ .NameUnderscore }}")
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
{{- else }}
	resp.Diagnostics.AddError("Cannot update a {{ .NameUnderscore }}", "Topicus KeyHub does not support updating a {{ .NameUnderscore }} via Terraform. The requested changes are not applied.")
{{- end }}
}

func (r *{{ .Name }}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
{{- if .DeleteSupported }}
	var data {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	tflog.Info(ctx, "Deleting {{ .NameUnderscore }} from Topicus KeyHub")
{{- if .ParentResourceType }}
	err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(-1){{ .SubResourceReqMethod }}.By{{ .SubResourceBaseUp }}idInt64(-1).WithUrl(getSelfLink(data.Links).Href.ValueString()).Delete(ctx, nil)
{{- else }}
	err := r.client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(-1).WithUrl(getSelfLink(data.Links).Href.ValueString()).Delete(ctx, nil)
{{- end }}
	if !isHttpStatusCodeOk(ctx, 404, err, &resp.Diagnostics) {
		return
	}
	tflog.Info(ctx, "Deleted {{ .NameUnderscore }} from Topicus KeyHub")
{{- else }}
	resp.Diagnostics.AddError("Cannot delete a {{ .NameUnderscore }}", "Topicus KeyHub does not support deleting a {{ .NameUnderscore }} via Terraform. The requested changes are not applied.")
{{- end }}
}

func (r *{{ .Name }}Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("uuid"), req, resp)
}
