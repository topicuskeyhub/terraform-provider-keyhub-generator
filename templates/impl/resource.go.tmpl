// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.
// Copyright (c) Topicus Security B.V.
// SPDX-License-Identifier: APSL-2.0

package provider

import (
	"context"
	"fmt"
{{- if .ParentResourceType }}
	"strings"
{{- end }}

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/sanity-io/litter"
	keyhubmodels "github.com/topicuskeyhub/sdk-go/models"
	keyhubreq "github.com/topicuskeyhub/sdk-go/{{ .ResourceBase }}"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ resource.Resource                = &{{ .Name }}Resource{}
	_ resource.ResourceWithImportState = &{{ .Name }}Resource{}
	_ resource.ResourceWithConfigure   = &{{ .Name }}Resource{}
)

func New{{ .NameUp }}Resource() resource.Resource {
	return &{{ .Name }}Resource{}
}

type {{ .Name }}Resource struct {
	providerData *KeyHubProviderData
}

func (r *{{ .Name }}Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = ProviderName + "_{{ .NameUnderscore }}"
	tflog.Info(ctx, "Registered resource "+resp.TypeName)
}

func (r *{{ .Name }}Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: resourceSchemaAttrs{{ .FullNameUp }}(true),
	}
}

func (r *{{ .Name }}Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(*KeyHubProviderData)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *keyhub.KeyHubClient, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.providerData = providerData
}

func (r *{{ .Name }}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var planData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	litter.Config.HidePrivateFields = false

	tflog.Trace(ctx, "planData: "+litter.Sdump(planData))

	var configData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Config.Get(ctx, &configData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "configData: "+litter.Sdump(configData))

	ctx = context.WithValue(ctx, keyHubClientKey, r.providerData.Client)
	planValues, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, planData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	configValues, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, configData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRS{{ .FullNameUp }}(ctx, true, planValues, configValues)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	additionalBackup := planData.Additional
	r.providerData.Mutex.Lock()
	defer r.providerData.Mutex.Unlock()
	tflog.Info(ctx, "Creating Topicus KeyHub {{ .NameUnderscore }}")
	newWrapper := keyhubmodels.New{{ .BaseNameUp }}LinkableWrapper()
	newWrapper.SetItems([]keyhubmodels.{{ .BaseNameUp }}able{newTkh})
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUID(ctx, planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	wrapper, err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.Post(
{{- else }}
	wrapper, err := r.providerData.Client.{{ .ResourceBaseUp }}().Post(
{{- end }}
		ctx, newWrapper, &keyhubreq.{{ .CollectionRequestTypePrefix }}RequestBuilderPostRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .CollectionRequestTypePrefix }}RequestBuilderPostQueryParameters{
				Additional: collectAdditional(ctx, planData, planData.Additional),
			},
		})
	tkh, diags := findFirst[keyhubmodels.{{ .BaseNameUp }}able](ctx, wrapper, "{{ .NameUnderscore }}", nil, false, err)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	postState, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	postState = setAttributeValue(ctx, postState, "{{ .ParentResourceNamePrefixUnderscore }}_uuid", types.StringValue(planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueString()))
{{- end }}
	postState = reorder{{ .FullNameUp }}(postState, planValues, true)
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&planData, postState)
	planData.Additional = additionalBackup

	resp.Diagnostics.Append(resp.State.Set(ctx, &planData)...)

	tflog.Info(ctx, "Created a new Topicus KeyHub {{ .NameUnderscore }}")
	resp.Diagnostics.Append(resp.State.Set(ctx, &planData)...)
}

func (r *{{ .Name }}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var planData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.State.Get(ctx, &planData)...)
	if resp.Diagnostics.HasError() {
		return
	}
	planValues, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, planData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	additionalBackup := planData.Additional
	r.providerData.Mutex.RLock()
	defer r.providerData.Mutex.RUnlock()
	ctx = context.WithValue(ctx, keyHubClientKey, r.providerData.Client)
	tflog.Info(ctx, "Reading {{ .NameUnderscore }} from Topicus KeyHub")
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUIDOrNil(ctx, planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if tkhParent == nil {
		tflog.Info(ctx, "Parent {{ .ParentResourceNamePrefixUnderscore }} not found, marking resource as removed")
		resp.State.RemoveResource(ctx)
		return
	}

	wrapper, err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.Get(
{{- else }}
	wrapper, err := r.providerData.Client.{{ .ResourceBaseUp }}().Get(
{{- end }}
		ctx, &keyhubreq.{{ .CollectionRequestTypePrefix }}RequestBuilderGetRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .CollectionRequestTypePrefix }}RequestBuilderGetQueryParameters{
				Additional: collectAdditional(ctx, planData, planData.Additional),
				{{ .ReadIdentifierQuery }}: []string {planData.{{ .ReadIdentifierStruct }}.ValueString()},
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	tkh, diags := findFirst[keyhubmodels.{{ .BaseNameUp }}able](ctx, wrapper, "{{ .NameUnderscore }}", planData.{{ .ReadIdentifierStruct }}.ValueStringPointer(), true, err)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if tkh == nil {
		tflog.Info(ctx, "{{ .NameUnderscore }} not found, marking resource as removed")
		resp.State.RemoveResource(ctx)
		return
	}

	postState, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	postState = setAttributeValue(ctx, postState, "{{ .ParentResourceNamePrefixUnderscore }}_uuid", types.StringValue(planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueString()))
{{- end }}
	postState = reorder{{ .FullNameUp }}(postState, planValues, true)
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&planData, postState)
	planData.Additional = additionalBackup

	resp.Diagnostics.Append(resp.State.Set(ctx, &planData)...)
}

func (r *{{ .Name }}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
{{- if .UpdateSupported }}
	var planData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var configData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.Config.Get(ctx, &configData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.providerData.Client)
	planValues, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, planData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	configValues, diags := types.ObjectValueFrom(ctx, {{ .FullName }}AttrTypesRSRecurse, configData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRS{{ .FullNameUp }}(ctx, true, planValues, configValues)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	additionalBackup := planData.Additional
	r.providerData.Mutex.Lock()
	defer r.providerData.Mutex.Unlock()
	tflog.Info(ctx, "Updating Topicus KeyHub {{ .NameUnderscore }}")
{{- if .ParentResourceType }}
	tkhParent, diags := find{{ .ParentResourceType }}ByUUID(ctx, planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueStringPointer())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tkh, err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(*tkhParent.GetLinks()[0].GetId()){{ .SubResourceReqMethod }}.By{{ .SubResourceBaseUp }}idInt64(getSelfLink(planData.Links).ID.ValueInt64()).Put(
{{- else }}
	tkh, err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(getSelfLink(planData.Links).ID.ValueInt64()).Put(
{{- end }}
		ctx, newTkh, &keyhubreq.{{ .ItemRequestTypePrefix }}RequestBuilderPutRequestConfiguration{
			QueryParameters: &keyhubreq.{{ .ItemRequestTypePrefix }}RequestBuilderPutQueryParameters{
				Additional: collectAdditional(ctx, planData, planData.Additional),
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	postState, diags := tkhToTFObjectRS{{ .FullNameUp }}(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if .ParentResourceType }}
	postState = setAttributeValue(ctx, postState, "{{ .ParentResourceNamePrefixUnderscore }}_uuid", types.StringValue(planData.{{ .ParentResourceNamePrefixUp }}UUID.ValueString()))
{{- end }}
	postState = reorder{{ .FullNameUp }}(postState, planValues, true)
	fillDataStructFromTFObjectRS{{ .FullNameUp }}(&planData, postState)
	planData.Additional = additionalBackup

	tflog.Info(ctx, "Updated a Topicus KeyHub {{ .NameUnderscore }}")
	resp.Diagnostics.Append(resp.State.Set(ctx, &planData)...)
{{- else }}
	resp.Diagnostics.AddError("Cannot update a {{ .NameUnderscore }}", "Topicus KeyHub does not support updating a {{ .NameUnderscore }} via Terraform. The requested changes are not applied.")
{{- end }}
}

func (r *{{ .Name }}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
{{- if .DeleteSupported }}
	var planData {{ .FullName }}DataRS
	resp.Diagnostics.Append(req.State.Get(ctx, &planData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	r.providerData.Mutex.Lock()
	defer r.providerData.Mutex.Unlock()
	ctx = context.WithValue(ctx, keyHubClientKey, r.providerData.Client)
	tflog.Info(ctx, "Deleting {{ .NameUnderscore }} from Topicus KeyHub")
{{- if .ParentResourceType }}
	err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(-1){{ .SubResourceReqMethod }}.By{{ .SubResourceBaseUp }}idInt64(-1).WithUrl(getSelfLink(planData.Links).Href.ValueString()).Delete(ctx, nil)
{{- else }}
	err := r.providerData.Client.{{ .ResourceBaseUp }}().By{{ .ResourceBaseUp }}idInt64(-1).WithUrl(getSelfLink(planData.Links).Href.ValueString()).Delete(ctx, nil)
{{- end }}
	if !isHttpStatusCodeOk(ctx, 404, err, &resp.Diagnostics) {
		return
	}
	tflog.Info(ctx, "Deleted {{ .NameUnderscore }} from Topicus KeyHub")
{{- else }}
	resp.Diagnostics.AddError("Cannot delete a {{ .NameUnderscore }}", "Topicus KeyHub does not support deleting a {{ .NameUnderscore }} via Terraform. The requested changes are not applied.")
{{- end }}
}

func (r *{{ .Name }}Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
{{- if .ParentResourceType }}
	idParts := strings.SplitN(req.ID, ".", 2)

	if len(idParts) != 2 || idParts[0] == "" || idParts[1] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: {{ .ParentResourceNamePrefixUnderscore }}_uuid.{{ .ReadIdentifierSchema }}. Got: %q", req.ID),
		)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("{{ .ParentResourceNamePrefixUnderscore }}_uuid"), idParts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("{{ .ReadIdentifierSchema }}"), idParts[1])...)
{{- else }}
	resource.ImportStatePassthroughID(ctx, path.Root("uuid"), req, resp)
{{- end }}
}
